
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  00800200  00800200  00000822  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a5  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001339  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1a  00000000  00000000  000040ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00004ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b81  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001317  00000000  00000000  00005f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00007234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c1       	rjmp	.+894    	; 0x3c4 <__vector_17>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6f c2       	rjmp	.+1246   	; 0x53c <__vector_23>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	cd c1       	rjmp	.+922    	; 0x41c <__vector_32>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e5 c1       	rjmp	.+970    	; 0x474 <__vector_42>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	07 c2       	rjmp	.+1038   	; 0x4cc <__vector_47>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	64 03       	mulsu	r22, r20
  e6:	67 03       	mulsu	r22, r23
  e8:	56 03       	mulsu	r21, r22
  ea:	5a 03       	fmul	r21, r18
  ec:	60 03       	mulsu	r22, r16
  ee:	9e 03       	fmulsu	r17, r22
  f0:	6b 03       	fmul	r22, r19
  f2:	6f 03       	fmul	r22, r23
  f4:	75 03       	mulsu	r23, r21
  f6:	79 03       	fmul	r23, r17
  f8:	7d 03       	fmul	r23, r21
  fa:	83 03       	fmuls	r16, r19
  fc:	87 03       	fmuls	r16, r23
  fe:	8b 03       	fmulsu	r16, r19
 100:	9e 03       	fmulsu	r17, r22
 102:	91 03       	fmuls	r17, r17
 104:	95 03       	fmuls	r17, r21
 106:	99 03       	fmulsu	r17, r17

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	d1 e2       	ldi	r29, 0x21	; 33
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60

00000204 <__do_clear_bss>:
 204:	22 e0       	ldi	r18, 0x02	; 2
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b2 e0       	ldi	r27, 0x02	; 2
 20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
 20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
 20e:	ae 39       	cpi	r26, 0x9E	; 158
 210:	b2 07       	cpc	r27, r18
 212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>

00000214 <__do_copy_data>:
 214:	12 e0       	ldi	r17, 0x02	; 2
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b2 e0       	ldi	r27, 0x02	; 2
 21a:	ee ea       	ldi	r30, 0xAE	; 174
 21c:	f7 e0       	ldi	r31, 0x07	; 7
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	7b d1       	rcall	.+758    	; 0x526 <main>
 230:	bc c2       	rjmp	.+1400   	; 0x7aa <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <setup>:
 234:	08 95       	ret

00000236 <loop>:

void setup() {

}

void loop() {
 236:	08 95       	ret

00000238 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	7b 01       	movw	r14, r22
 24a:	6a 01       	movw	r12, r20
  if( Channel[timer] < 0 )
 24c:	08 2f       	mov	r16, r24
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	e8 01       	movw	r28, r16
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	dd 4f       	sbci	r29, 0xFD	; 253
 256:	88 81       	ld	r24, Y
 258:	87 ff       	sbrs	r24, 7
 25a:	04 c0       	rjmp	.+8      	; 0x264 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
 25c:	fb 01       	movw	r30, r22
 25e:	11 82       	std	Z+1, r1	; 0x01
 260:	10 82       	st	Z, r1
 262:	24 c0       	rjmp	.+72     	; 0x2ac <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
 264:	8c e0       	ldi	r24, 0x0C	; 12
 266:	80 9f       	mul	r24, r16
 268:	90 01       	movw	r18, r0
 26a:	81 9f       	mul	r24, r17
 26c:	30 0d       	add	r19, r0
 26e:	11 24       	eor	r1, r1
 270:	88 81       	ld	r24, Y
 272:	a9 01       	movw	r20, r18
 274:	48 0f       	add	r20, r24
 276:	51 1d       	adc	r21, r1
 278:	87 fd       	sbrc	r24, 7
 27a:	5a 95       	dec	r21
 27c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	48 17       	cp	r20, r24
 284:	59 07       	cpc	r21, r25
 286:	94 f4       	brge	.+36     	; 0x2ac <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
 288:	88 81       	ld	r24, Y
 28a:	a9 01       	movw	r20, r18
 28c:	48 0f       	add	r20, r24
 28e:	51 1d       	adc	r21, r1
 290:	87 fd       	sbrc	r24, 7
 292:	5a 95       	dec	r21
 294:	ca 01       	movw	r24, r20
 296:	fa 01       	movw	r30, r20
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	8e 0f       	add	r24, r30
 29e:	9f 1f       	adc	r25, r31
 2a0:	fc 01       	movw	r30, r24
 2a2:	eb 5f       	subi	r30, 0xFB	; 251
 2a4:	fd 4f       	sbci	r31, 0xFD	; 253
 2a6:	80 81       	ld	r24, Z
 2a8:	86 fd       	sbrc	r24, 6
 2aa:	19 c0       	rjmp	.+50     	; 0x2de <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
 2ac:	88 81       	ld	r24, Y
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	88 83       	st	Y, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	80 9f       	mul	r24, r16
 2b6:	90 01       	movw	r18, r0
 2b8:	81 9f       	mul	r24, r17
 2ba:	30 0d       	add	r19, r0
 2bc:	11 24       	eor	r1, r1
 2be:	88 81       	ld	r24, Y
 2c0:	a9 01       	movw	r20, r18
 2c2:	48 0f       	add	r20, r24
 2c4:	51 1d       	adc	r21, r1
 2c6:	87 fd       	sbrc	r24, 7
 2c8:	5a 95       	dec	r21
 2ca:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	48 17       	cp	r20, r24
 2d2:	59 07       	cpc	r21, r25
 2d4:	b4 f4       	brge	.+44     	; 0x302 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
 2d6:	88 81       	ld	r24, Y
 2d8:	8c 30       	cpi	r24, 0x0C	; 12
 2da:	3c f1       	brlt	.+78     	; 0x32a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf2>
 2dc:	12 c0       	rjmp	.+36     	; 0x302 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
 2de:	88 81       	ld	r24, Y
 2e0:	28 0f       	add	r18, r24
 2e2:	31 1d       	adc	r19, r1
 2e4:	87 fd       	sbrc	r24, 7
 2e6:	3a 95       	dec	r19
 2e8:	f9 01       	movw	r30, r18
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	2e 0f       	add	r18, r30
 2f0:	3f 1f       	adc	r19, r31
 2f2:	f9 01       	movw	r30, r18
 2f4:	eb 5f       	subi	r30, 0xFB	; 251
 2f6:	fd 4f       	sbci	r31, 0xFD	; 253
 2f8:	80 81       	ld	r24, Z
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	8f 73       	andi	r24, 0x3F	; 63
 2fe:	1f d2       	rcall	.+1086   	; 0x73e <digitalWrite>
 300:	d5 cf       	rjmp	.-86     	; 0x2ac <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
 302:	f7 01       	movw	r30, r14
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	04 96       	adiw	r24, 0x04	; 4
 30a:	80 34       	cpi	r24, 0x40	; 64
 30c:	9c 49       	sbci	r25, 0x9C	; 156
 30e:	18 f4       	brcc	.+6      	; 0x316 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xde>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
 310:	80 e4       	ldi	r24, 0x40	; 64
 312:	9c e9       	ldi	r25, 0x9C	; 156
 314:	04 c0       	rjmp	.+8      	; 0x31e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe6>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
 316:	f7 01       	movw	r30, r14
 318:	80 81       	ld	r24, Z
 31a:	91 81       	ldd	r25, Z+1	; 0x01
 31c:	04 96       	adiw	r24, 0x04	; 4
 31e:	f6 01       	movw	r30, r12
 320:	91 83       	std	Z+1, r25	; 0x01
 322:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	88 83       	st	Y, r24
  }
}
 328:	44 c0       	rjmp	.+136    	; 0x3b2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
 32a:	f7 01       	movw	r30, r14
 32c:	40 81       	ld	r20, Z
 32e:	51 81       	ldd	r21, Z+1	; 0x01
 330:	88 81       	ld	r24, Y
 332:	b9 01       	movw	r22, r18
 334:	68 0f       	add	r22, r24
 336:	71 1d       	adc	r23, r1
 338:	87 fd       	sbrc	r24, 7
 33a:	7a 95       	dec	r23
 33c:	cb 01       	movw	r24, r22
 33e:	fb 01       	movw	r30, r22
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	8e 0f       	add	r24, r30
 346:	9f 1f       	adc	r25, r31
 348:	fc 01       	movw	r30, r24
 34a:	eb 5f       	subi	r30, 0xFB	; 251
 34c:	fd 4f       	sbci	r31, 0xFD	; 253
 34e:	81 81       	ldd	r24, Z+1	; 0x01
 350:	92 81       	ldd	r25, Z+2	; 0x02
 352:	84 0f       	add	r24, r20
 354:	95 1f       	adc	r25, r21
 356:	f6 01       	movw	r30, r12
 358:	91 83       	std	Z+1, r25	; 0x01
 35a:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
 35c:	88 81       	ld	r24, Y
 35e:	a9 01       	movw	r20, r18
 360:	48 0f       	add	r20, r24
 362:	51 1d       	adc	r21, r1
 364:	87 fd       	sbrc	r24, 7
 366:	5a 95       	dec	r21
 368:	ca 01       	movw	r24, r20
 36a:	fa 01       	movw	r30, r20
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	8e 0f       	add	r24, r30
 372:	9f 1f       	adc	r25, r31
 374:	fc 01       	movw	r30, r24
 376:	eb 5f       	subi	r30, 0xFB	; 251
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	80 81       	ld	r24, Z
 37c:	86 ff       	sbrs	r24, 6
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
 380:	88 81       	ld	r24, Y
 382:	28 0f       	add	r18, r24
 384:	31 1d       	adc	r19, r1
 386:	87 fd       	sbrc	r24, 7
 388:	3a 95       	dec	r19
 38a:	f9 01       	movw	r30, r18
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	2e 0f       	add	r18, r30
 392:	3f 1f       	adc	r19, r31
 394:	f9 01       	movw	r30, r18
 396:	eb 5f       	subi	r30, 0xFB	; 251
 398:	fd 4f       	sbci	r31, 0xFD	; 253
 39a:	80 81       	ld	r24, Z
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	8f 73       	andi	r24, 0x3F	; 63
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
 3ae:	cf 90       	pop	r12
 3b0:	c6 c1       	rjmp	.+908    	; 0x73e <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12
 3c2:	08 95       	ret

000003c4 <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	0b b6       	in	r0, 0x3b	; 59
 3d0:	0f 92       	push	r0
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
 3ea:	48 e8       	ldi	r20, 0x88	; 136
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	64 e8       	ldi	r22, 0x84	; 132
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	21 df       	rcall	.-446    	; 0x238 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0b be       	out	0x3b, r0	; 59
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	0b b6       	in	r0, 0x3b	; 59
 428:	0f 92       	push	r0
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
 442:	48 e9       	ldi	r20, 0x98	; 152
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	64 e9       	ldi	r22, 0x94	; 148
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	f5 de       	rcall	.-534    	; 0x238 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0b be       	out	0x3b, r0	; 59
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	0b b6       	in	r0, 0x3b	; 59
 480:	0f 92       	push	r0
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
 49a:	48 ea       	ldi	r20, 0xA8	; 168
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	64 ea       	ldi	r22, 0xA4	; 164
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	c9 de       	rcall	.-622    	; 0x238 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0b be       	out	0x3b, r0	; 59
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	0b b6       	in	r0, 0x3b	; 59
 4d8:	0f 92       	push	r0
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
 4f2:	48 e2       	ldi	r20, 0x28	; 40
 4f4:	51 e0       	ldi	r21, 0x01	; 1
 4f6:	64 e2       	ldi	r22, 0x24	; 36
 4f8:	71 e0       	ldi	r23, 0x01	; 1
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	9d de       	rcall	.-710    	; 0x238 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <initVariant>:
 524:	08 95       	ret

00000526 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 526:	54 d0       	rcall	.+168    	; 0x5d0 <init>

	initVariant();
 528:	fd df       	rcall	.-6      	; 0x524 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 52a:	84 de       	rcall	.-760    	; 0x234 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 52c:	c0 e0       	ldi	r28, 0x00	; 0
 52e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 530:	82 de       	rcall	.-764    	; 0x236 <loop>
 532:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
 534:	e9 f3       	breq	.-6      	; 0x530 <main+0xa>
 536:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 53a:	fa cf       	rjmp	.-12     	; 0x530 <main+0xa>

0000053c <__vector_23>:
 53c:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <timer0_millis>
 556:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <timer0_millis+0x1>
 55a:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <timer0_millis+0x2>
 55e:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <timer0_millis+0x3>
 562:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <timer0_fract>
 566:	23 e0       	ldi	r18, 0x03	; 3
 568:	23 0f       	add	r18, r19
 56a:	2d 37       	cpi	r18, 0x7D	; 125
 56c:	20 f4       	brcc	.+8      	; 0x576 <__vector_23+0x3a>
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	a1 1d       	adc	r26, r1
 572:	b1 1d       	adc	r27, r1
 574:	05 c0       	rjmp	.+10     	; 0x580 <__vector_23+0x44>
 576:	26 e8       	ldi	r18, 0x86	; 134
 578:	23 0f       	add	r18, r19
 57a:	02 96       	adiw	r24, 0x02	; 2
 57c:	a1 1d       	adc	r26, r1
 57e:	b1 1d       	adc	r27, r1
 580:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <timer0_fract>
 584:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <timer0_millis>
 588:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <timer0_millis+0x1>
 58c:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <timer0_millis+0x2>
 590:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <timer0_millis+0x3>
 594:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <timer0_overflow_count>
 598:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <timer0_overflow_count+0x1>
 59c:	a0 91 9c 02 	lds	r26, 0x029C	; 0x80029c <timer0_overflow_count+0x2>
 5a0:	b0 91 9d 02 	lds	r27, 0x029D	; 0x80029d <timer0_overflow_count+0x3>
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	a1 1d       	adc	r26, r1
 5a8:	b1 1d       	adc	r27, r1
 5aa:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <timer0_overflow_count>
 5ae:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <timer0_overflow_count+0x1>
 5b2:	a0 93 9c 02 	sts	0x029C, r26	; 0x80029c <timer0_overflow_count+0x2>
 5b6:	b0 93 9d 02 	sts	0x029D, r27	; 0x80029d <timer0_overflow_count+0x3>
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	3f 91       	pop	r19
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5d0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5d2:	84 b5       	in	r24, 0x24	; 36
 5d4:	82 60       	ori	r24, 0x02	; 2
 5d6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 5d8:	84 b5       	in	r24, 0x24	; 36
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5de:	85 b5       	in	r24, 0x25	; 37
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 5e4:	85 b5       	in	r24, 0x25	; 37
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5ea:	ee e6       	ldi	r30, 0x6E	; 110
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	81 60       	ori	r24, 0x01	; 1
 5f2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 5f4:	e1 e8       	ldi	r30, 0x81	; 129
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5fa:	80 81       	ld	r24, Z
 5fc:	82 60       	ori	r24, 0x02	; 2
 5fe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 600:	80 81       	ld	r24, Z
 602:	81 60       	ori	r24, 0x01	; 1
 604:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 606:	e0 e8       	ldi	r30, 0x80	; 128
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	81 60       	ori	r24, 0x01	; 1
 60e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 610:	e1 eb       	ldi	r30, 0xB1	; 177
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	84 60       	ori	r24, 0x04	; 4
 618:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 61a:	e0 eb       	ldi	r30, 0xB0	; 176
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	81 60       	ori	r24, 0x01	; 1
 622:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 624:	e1 e9       	ldi	r30, 0x91	; 145
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	82 60       	ori	r24, 0x02	; 2
 62c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 62e:	80 81       	ld	r24, Z
 630:	81 60       	ori	r24, 0x01	; 1
 632:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 634:	e0 e9       	ldi	r30, 0x90	; 144
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 63e:	e1 ea       	ldi	r30, 0xA1	; 161
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	82 60       	ori	r24, 0x02	; 2
 646:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 648:	80 81       	ld	r24, Z
 64a:	81 60       	ori	r24, 0x01	; 1
 64c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 64e:	e0 ea       	ldi	r30, 0xA0	; 160
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	81 60       	ori	r24, 0x01	; 1
 656:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 658:	e1 e2       	ldi	r30, 0x21	; 33
 65a:	f1 e0       	ldi	r31, 0x01	; 1
 65c:	80 81       	ld	r24, Z
 65e:	82 60       	ori	r24, 0x02	; 2
 660:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 662:	80 81       	ld	r24, Z
 664:	81 60       	ori	r24, 0x01	; 1
 666:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 668:	e0 e2       	ldi	r30, 0x20	; 32
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	80 81       	ld	r24, Z
 66e:	81 60       	ori	r24, 0x01	; 1
 670:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 672:	ea e7       	ldi	r30, 0x7A	; 122
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 67c:	80 81       	ld	r24, Z
 67e:	82 60       	ori	r24, 0x02	; 2
 680:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 682:	80 81       	ld	r24, Z
 684:	81 60       	ori	r24, 0x01	; 1
 686:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 688:	80 81       	ld	r24, Z
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 68e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 692:	08 95       	ret

00000694 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	fc 01       	movw	r30, r24
 698:	31 97       	sbiw	r30, 0x01	; 1
 69a:	e2 31       	cpi	r30, 0x12	; 18
 69c:	f1 05       	cpc	r31, r1
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <turnOffPWM+0xe>
 6a0:	4d c0       	rjmp	.+154    	; 0x73c <turnOffPWM+0xa8>
 6a2:	88 27       	eor	r24, r24
 6a4:	ee 58       	subi	r30, 0x8E	; 142
 6a6:	ff 4f       	sbci	r31, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	77 c0       	rjmp	.+238    	; 0x79a <__tablejump2__>
 6ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 6b0:	8f 77       	andi	r24, 0x7F	; 127
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <turnOffPWM+0x26>
 6b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 6b8:	8f 7d       	andi	r24, 0xDF	; 223
 6ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 6be:	08 95       	ret
 6c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 6c4:	87 7f       	andi	r24, 0xF7	; 247
 6c6:	f9 cf       	rjmp	.-14     	; 0x6ba <turnOffPWM+0x26>
 6c8:	84 b5       	in	r24, 0x24	; 36
 6ca:	8f 77       	andi	r24, 0x7F	; 127
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <turnOffPWM+0x3e>
 6ce:	84 b5       	in	r24, 0x24	; 36
 6d0:	8f 7d       	andi	r24, 0xDF	; 223
 6d2:	84 bd       	out	0x24, r24	; 36
 6d4:	08 95       	ret
 6d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 6da:	8f 77       	andi	r24, 0x7F	; 127
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <turnOffPWM+0x50>
 6de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 6e2:	8f 7d       	andi	r24, 0xDF	; 223
 6e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 6e8:	08 95       	ret
 6ea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 6ee:	8f 77       	andi	r24, 0x7F	; 127
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <turnOffPWM+0x6c>
 6f2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 6f6:	8f 7d       	andi	r24, 0xDF	; 223
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <turnOffPWM+0x6c>
 6fa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 6fe:	87 7f       	andi	r24, 0xF7	; 247
 700:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 704:	08 95       	ret
 706:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 70a:	8f 77       	andi	r24, 0x7F	; 127
 70c:	07 c0       	rjmp	.+14     	; 0x71c <turnOffPWM+0x88>
 70e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 712:	8f 7d       	andi	r24, 0xDF	; 223
 714:	03 c0       	rjmp	.+6      	; 0x71c <turnOffPWM+0x88>
 716:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 71a:	87 7f       	andi	r24, 0xF7	; 247
 71c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 720:	08 95       	ret
 722:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 726:	8f 77       	andi	r24, 0x7F	; 127
 728:	07 c0       	rjmp	.+14     	; 0x738 <turnOffPWM+0xa4>
 72a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 72e:	8f 7d       	andi	r24, 0xDF	; 223
 730:	03 c0       	rjmp	.+6      	; 0x738 <turnOffPWM+0xa4>
 732:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 736:	87 7f       	andi	r24, 0xF7	; 247
 738:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 73c:	08 95       	ret

0000073e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 73e:	1f 93       	push	r17
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 744:	28 2f       	mov	r18, r24
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	f9 01       	movw	r30, r18
 74a:	e8 5f       	subi	r30, 0xF8	; 248
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 750:	f9 01       	movw	r30, r18
 752:	e2 5b       	subi	r30, 0xB2	; 178
 754:	fe 4f       	sbci	r31, 0xFE	; 254
 756:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 758:	f9 01       	movw	r30, r18
 75a:	ec 56       	subi	r30, 0x6C	; 108
 75c:	fe 4f       	sbci	r31, 0xFE	; 254
 75e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 760:	cc 23       	and	r28, r28
 762:	b9 f0       	breq	.+46     	; 0x792 <digitalWrite+0x54>
 764:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 766:	81 11       	cpse	r24, r1
 768:	95 df       	rcall	.-214    	; 0x694 <turnOffPWM>

	out = portOutputRegister(port);
 76a:	ec 2f       	mov	r30, r28
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	e6 52       	subi	r30, 0x26	; 38
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	a5 91       	lpm	r26, Z+
 778:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 77a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 77c:	f8 94       	cli

	if (val == LOW) {
 77e:	11 11       	cpse	r17, r1
 780:	04 c0       	rjmp	.+8      	; 0x78a <digitalWrite+0x4c>
		*out &= ~bit;
 782:	8c 91       	ld	r24, X
 784:	d0 95       	com	r29
 786:	d8 23       	and	r29, r24
 788:	02 c0       	rjmp	.+4      	; 0x78e <digitalWrite+0x50>
	} else {
		*out |= bit;
 78a:	ec 91       	ld	r30, X
 78c:	de 2b       	or	r29, r30
 78e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 790:	9f bf       	out	0x3f, r25	; 63
}
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	1f 91       	pop	r17
 798:	08 95       	ret

0000079a <__tablejump2__>:
 79a:	ee 0f       	add	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	88 1f       	adc	r24, r24
 7a0:	8b bf       	out	0x3b, r24	; 59
 7a2:	07 90       	elpm	r0, Z+
 7a4:	f6 91       	elpm	r31, Z
 7a6:	e0 2d       	mov	r30, r0
 7a8:	19 94       	eijmp

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>
